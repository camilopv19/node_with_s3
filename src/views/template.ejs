<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>S3</title>
  <link rel="stylesheet" href="./styles.css" />
</head>
<body>
  <h1>Client</h1>
  <div>
    <div>
      <form id="upForm">
        <input id="file" type="file" />
      </form>
      <p>
        <button class="upload" id="btnUp" onclick="upload()" disabled="true">
          Select a file to upload
        </button>
      </p>
    </div>
    <button class="get" id="btnGet" onclick="getFiles()">
      Get bucket objects
    </button>
    <div>
      <button class="info" id="btnGet" onclick="getMetadata()">
        Get metadata from random image
      </button>
      <ul id="randomImg"></ul>
    </div>
  </div>
  <ul id="list"></ul>
  <script src="https://sdk.amazonaws.com/js/aws-sdk-2.1105.0.min.js"></script>
  <script>
    document.getElementById("file").addEventListener("change", function (e) {
      if (e.target.files[0]) {
        const btn = document.getElementById("btnUp");
        btn.removeAttribute("disabled");
        btn.innerHTML = "Upload";
      }
    });

    const listElements = (data) => {
      //List cleaning
      document.getElementById("list").innerHTML = "";
      if (data.Contents && data.Contents.length > 0) {
        const list = document.getElementById("list");
        data.Contents.forEach(({ Key }, index) => {
          const [_, fileName] = Key.split("/");
          //Delete button for each element
          let upBtn = document.createElement("button");
          upBtn.innerHTML = "Delete this object";
          upBtn.className = "delete";
          upBtn.addEventListener("click", (event) => deleteObj(event));
          //Download button for each element
          let downBtn = document.createElement("button");
          downBtn.innerHTML = "Download this object";
          downBtn.className = "info";
          downBtn.addEventListener("click", (event) => downloadObj(event));

          let listNode = document.createElement("li");
          listNode.setAttribute("id", Key);
          listNode.innerHTML = `${fileName}  `;
          let btnContainer = document.createElement("div");
          btnContainer.setAttribute("class", "container");
          btnContainer.appendChild(upBtn);
          btnContainer.appendChild(downBtn);
          listNode.appendChild(btnContainer);
          list.appendChild(listNode);
        });
      } else {
        document.getElementById("list").innerHTML =
          "No elements in Bucket/folder";
      }
    };

    // UPLOAD
    const upload = async () => {
      const formdata = new FormData();
      const input = document.getElementById("file");
      const file = input.files[0];
      if (!file) {
        alert("No file selected.");
        return;
      }

      const url = "/upload"; // Replace with your server's upload endpoint

      const formData = new FormData();
      formData.append("input_files", file);

      fetch(url, {
        method: "POST",
        body: formData,
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`File upload failed. Status: ${response.status}`);
          }
          alert("File uploaded successfully!");
        })
        .catch((error) => {
          console.error("Error uploading file:", error);
          alert("File upload failed. Please try again.");
        });
      const btn = document.getElementById("btnUp");
      btn.setAttribute("disabled", true);
      input.value = null;
    };

    // GET
    const getFiles = async () => {
      //Getting data
      const data = await fetch("/list?folderName=public_asset");
      data.json().then(({ data }) => listElements(data));
    };
    // GET METADATA
    const getMetadata = async () => {
      //Getting data
      const data = await fetch("/list?folderName=public_asset");
      data.json().then(({ data }) => {
        document.getElementById("randomImg").innerHTML = "";
        if (data.Contents && data.Contents.length > 0) {
          const randomImg = document.getElementById("randomImg");
          const randomIdx = Math.floor(Math.random() * data.Contents.length);
          Object.keys(data.Contents[randomIdx]).forEach((Key) => {
            let listNode = document.createElement("li");
            listNode.innerHTML = `<b>${Key}:</b>  ${data.Contents[randomIdx][Key]}`;
            randomImg.appendChild(listNode);
          });
        }
      });
    };

    // DELETE
    const deleteObj = async ({
      target: {
        parentNode: {
          parentNode: { id },
        },
      },
    }) => {
      let response = await fetch("/remove", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json;charset=utf-8",
        },
        body: JSON.stringify({ fileKeys: [id] }),
      });
      response.json().then(({ msg }) => {
        alert(msg);
        document.getElementById(id).remove();
      });
    };

    // DOWNLOAD
    const downloadObj = async ({
      target: {
        parentNode: {
          parentNode: { id },
        },
      },
    }) => {
      const [_, file] = id.split("/");
      const url = "/download";
      const queryParams = new URLSearchParams({ file });
      let response = await fetch(`${url}?${queryParams.toString()}`, {
        method: "GET",
      });
      if (!response.ok) {
        throw new Error(
          `Failed to download file. Status: ${response.status}`
        );
      }
      const contentDisposition = response.headers.get("content-disposition");

      /**
       * Regex to match the first appearance of slash (after the folder) and
       * (.+) is a capturing group that matches one or more characters of any type,
       * except for line breaks. The parentheses () define the capturing group.
       * So the matching pattern captures the substring following the first
       * occurrence of slash "/" to the end
       */
      const fileNameMatch = contentDisposition?.match(/\/(.+)/);
      const fileName = fileNameMatch ? fileNameMatch[1] : "downloaded_file";

      const blob = await response.blob();

      // Create a temporary link element to trigger the file download
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = fileName;
      link.style.display = "none";

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    };

    //POLL AND PUBLISH SQS (CONTINUOS PROCESS)
    const poll = async () => {
      // Configure AWS SDK with your credentials and desired region
      AWS.config.update({
        accessKeyId: '<%= process.env.AWS_ACCESS_KEY_ID %>',
        secretAccessKey: '<%= process.env.AWS_SECRET_KEY %>',
        region: '<%= process.env.AWS_REGION %>' // Replace with your desired region
      });

      // Create an SQS service object
      const batchSize = 10; // Number of messages to retrieve in each batch
      const sqs = new AWS.SQS({
        region: '<%= process.env.AWS_REGION %>',
        apiVersion: '2012-11-05'
      });
      const sns = new AWS.SNS({ region: '<%= process.env.AWS_REGION %>' });
      const queueUrl = '<%= process.env.AWS_SQS_QUEUE %>';
      const topicArn = '<%= process.env.AWS_SNS_TOPIC %>';
      const receiveParams = {
        QueueUrl: queueUrl || '',
        MaxNumberOfMessages: batchSize,
        WaitTimeSeconds: 20, // Long polling for messages
      };

      const response = await sqs.receiveMessage(receiveParams).promise();

      if (response.Messages && response.Messages.length > 0) {
        const publishPromises = response.Messages.map((message) => {
          const publishParams = {
            TopicArn: topicArn,
            Message: message.Body,
          };

          return sns.publish(publishParams).promise();
        });

        await Promise.all(publishPromises);
        alert(response.Messages.length + ' messages were delivered! '+new Date())

        // Delete the processed messages from the SQS queue
        const deleteParams = {
          QueueUrl: queueUrl || '',
          Entries: response.Messages.map((message) => ({
            Id: message.MessageId,
            ReceiptHandle: message.ReceiptHandle,
          })),
        };

        const deleted = await sqs.deleteMessageBatch(deleteParams).promise();
        console.log('deleted', deleted);

        // Continue polling for more messages with custom interval (30s)
        setTimeout(poll, 30000);
      }
    };

    (async function () {
      await poll();
    })();

  </script>
</body>

</html>